{"ast":null,"code":"'use client';\n\nimport { useCallback, useContext } from 'react';\nimport classNames from 'classnames';\nimport { prefix as addPrefix } from './prefix';\nimport TableContext from '../TableContext';\n\n// This is the only way I found to break circular references between ClassArray and ClassValue\n// https://github.com/Microsoft/TypeScript/issues/3496#issuecomment-128553540\n\n//eslint-disable-line @typescript-eslint/no-empty-interface\n\n/**\n * Add a prefix to all classNames.\n *\n * @param str prefix of className\n * @returns { withClassPrefix, merge, prefix }\n *  - withClassPrefix: A function of combining className and adding a prefix to each className.\n *    At the same time, the default `classPrefix` is the first className.\n *  - merge: A merge className function.\n *  - prefix: Add a prefix to className\n *  - rootPrefix\n */\nfunction useClassNames(str, controlled) {\n  var _ref = useContext(TableContext) || {},\n    _ref$classPrefix = _ref.classPrefix,\n    contextClassPrefix = _ref$classPrefix === void 0 ? 'rs' : _ref$classPrefix;\n  var componentName = controlled ? str : addPrefix(contextClassPrefix, str);\n\n  /**\n   * @example\n   *\n   * if str = 'button':\n   * prefix('red', { active: true }) => 'rs-button-red rs-button-active'\n   */\n  var prefix = useCallback(function () {\n    var mergeClasses = arguments.length ? classNames.apply(void 0, arguments).split(' ').map(function (item) {\n      return addPrefix(componentName, item);\n    }) : [];\n    return mergeClasses.filter(function (cls) {\n      return cls;\n    }).join(' ');\n  }, [componentName]);\n\n  /**\n   * @example\n   *\n   * if str = 'button':\n   * withClassPrefix('red', { active: true }) => 'rs-button rs-button-red rs-button-active'\n   */\n  var withClassPrefix = useCallback(function () {\n    for (var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++) {\n      classes[_key] = arguments[_key];\n    }\n    var mergeClasses = prefix(classes);\n    return mergeClasses ? componentName + \" \" + mergeClasses : componentName;\n  }, [componentName, prefix]);\n\n  /**\n   * @example\n   * rootPrefix('btn') => 'rs-btn'\n   * rootPrefix('btn', { active: true }) => 'rs-btn rs-active'\n   */\n  var rootPrefix = function rootPrefix() {\n    var mergeClasses = arguments.length ? classNames.apply(void 0, arguments).split(' ').map(function (item) {\n      return addPrefix(contextClassPrefix, item);\n    }) : [];\n    return mergeClasses.filter(function (cls) {\n      return cls;\n    }).join(' ');\n  };\n  return {\n    withClassPrefix: withClassPrefix,\n    merge: classNames,\n    prefix: prefix,\n    rootPrefix: rootPrefix\n  };\n}\nexport default useClassNames;","map":{"version":3,"names":["useCallback","useContext","classNames","prefix","addPrefix","TableContext","useClassNames","str","controlled","_ref","_ref$classPrefix","classPrefix","contextClassPrefix","componentName","mergeClasses","arguments","length","apply","split","map","item","filter","cls","join","withClassPrefix","_len","classes","Array","_key","rootPrefix","merge"],"sources":["C:/Users/lenovo/OneDrive/Documents/local project/platfoorm45_technical_challenge/node_modules/rsuite-table/es/utils/useClassNames.js"],"sourcesContent":["'use client';\nimport { useCallback, useContext } from 'react';\nimport classNames from 'classnames';\nimport { prefix as addPrefix } from './prefix';\nimport TableContext from '../TableContext';\n\n// This is the only way I found to break circular references between ClassArray and ClassValue\n// https://github.com/Microsoft/TypeScript/issues/3496#issuecomment-128553540\n\n//eslint-disable-line @typescript-eslint/no-empty-interface\n\n/**\n * Add a prefix to all classNames.\n *\n * @param str prefix of className\n * @returns { withClassPrefix, merge, prefix }\n *  - withClassPrefix: A function of combining className and adding a prefix to each className.\n *    At the same time, the default `classPrefix` is the first className.\n *  - merge: A merge className function.\n *  - prefix: Add a prefix to className\n *  - rootPrefix\n */\nfunction useClassNames(str, controlled) {\n  var _ref = useContext(TableContext) || {},\n    _ref$classPrefix = _ref.classPrefix,\n    contextClassPrefix = _ref$classPrefix === void 0 ? 'rs' : _ref$classPrefix;\n  var componentName = controlled ? str : addPrefix(contextClassPrefix, str);\n\n  /**\n   * @example\n   *\n   * if str = 'button':\n   * prefix('red', { active: true }) => 'rs-button-red rs-button-active'\n   */\n  var prefix = useCallback(function () {\n    var mergeClasses = arguments.length ? classNames.apply(void 0, arguments).split(' ').map(function (item) {\n      return addPrefix(componentName, item);\n    }) : [];\n    return mergeClasses.filter(function (cls) {\n      return cls;\n    }).join(' ');\n  }, [componentName]);\n\n  /**\n   * @example\n   *\n   * if str = 'button':\n   * withClassPrefix('red', { active: true }) => 'rs-button rs-button-red rs-button-active'\n   */\n  var withClassPrefix = useCallback(function () {\n    for (var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++) {\n      classes[_key] = arguments[_key];\n    }\n    var mergeClasses = prefix(classes);\n    return mergeClasses ? componentName + \" \" + mergeClasses : componentName;\n  }, [componentName, prefix]);\n\n  /**\n   * @example\n   * rootPrefix('btn') => 'rs-btn'\n   * rootPrefix('btn', { active: true }) => 'rs-btn rs-active'\n   */\n  var rootPrefix = function rootPrefix() {\n    var mergeClasses = arguments.length ? classNames.apply(void 0, arguments).split(' ').map(function (item) {\n      return addPrefix(contextClassPrefix, item);\n    }) : [];\n    return mergeClasses.filter(function (cls) {\n      return cls;\n    }).join(' ');\n  };\n  return {\n    withClassPrefix: withClassPrefix,\n    merge: classNames,\n    prefix: prefix,\n    rootPrefix: rootPrefix\n  };\n}\nexport default useClassNames;"],"mappings":"AAAA,YAAY;;AACZ,SAASA,WAAW,EAAEC,UAAU,QAAQ,OAAO;AAC/C,OAAOC,UAAU,MAAM,YAAY;AACnC,SAASC,MAAM,IAAIC,SAAS,QAAQ,UAAU;AAC9C,OAAOC,YAAY,MAAM,iBAAiB;;AAE1C;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAaA,CAACC,GAAG,EAAEC,UAAU,EAAE;EACtC,IAAIC,IAAI,GAAGR,UAAU,CAACI,YAAY,CAAC,IAAI,CAAC,CAAC;IACvCK,gBAAgB,GAAGD,IAAI,CAACE,WAAW;IACnCC,kBAAkB,GAAGF,gBAAgB,KAAK,KAAK,CAAC,GAAG,IAAI,GAAGA,gBAAgB;EAC5E,IAAIG,aAAa,GAAGL,UAAU,GAAGD,GAAG,GAAGH,SAAS,CAACQ,kBAAkB,EAAEL,GAAG,CAAC;;EAEzE;AACF;AACA;AACA;AACA;AACA;EACE,IAAIJ,MAAM,GAAGH,WAAW,CAAC,YAAY;IACnC,IAAIc,YAAY,GAAGC,SAAS,CAACC,MAAM,GAAGd,UAAU,CAACe,KAAK,CAAC,KAAK,CAAC,EAAEF,SAAS,CAAC,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,UAAUC,IAAI,EAAE;MACvG,OAAOhB,SAAS,CAACS,aAAa,EAAEO,IAAI,CAAC;IACvC,CAAC,CAAC,GAAG,EAAE;IACP,OAAON,YAAY,CAACO,MAAM,CAAC,UAAUC,GAAG,EAAE;MACxC,OAAOA,GAAG;IACZ,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;EACd,CAAC,EAAE,CAACV,aAAa,CAAC,CAAC;;EAEnB;AACF;AACA;AACA;AACA;AACA;EACE,IAAIW,eAAe,GAAGxB,WAAW,CAAC,YAAY;IAC5C,KAAK,IAAIyB,IAAI,GAAGV,SAAS,CAACC,MAAM,EAAEU,OAAO,GAAG,IAAIC,KAAK,CAACF,IAAI,CAAC,EAAEG,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGH,IAAI,EAAEG,IAAI,EAAE,EAAE;MAC1FF,OAAO,CAACE,IAAI,CAAC,GAAGb,SAAS,CAACa,IAAI,CAAC;IACjC;IACA,IAAId,YAAY,GAAGX,MAAM,CAACuB,OAAO,CAAC;IAClC,OAAOZ,YAAY,GAAGD,aAAa,GAAG,GAAG,GAAGC,YAAY,GAAGD,aAAa;EAC1E,CAAC,EAAE,CAACA,aAAa,EAAEV,MAAM,CAAC,CAAC;;EAE3B;AACF;AACA;AACA;AACA;EACE,IAAI0B,UAAU,GAAG,SAASA,UAAUA,CAAA,EAAG;IACrC,IAAIf,YAAY,GAAGC,SAAS,CAACC,MAAM,GAAGd,UAAU,CAACe,KAAK,CAAC,KAAK,CAAC,EAAEF,SAAS,CAAC,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,UAAUC,IAAI,EAAE;MACvG,OAAOhB,SAAS,CAACQ,kBAAkB,EAAEQ,IAAI,CAAC;IAC5C,CAAC,CAAC,GAAG,EAAE;IACP,OAAON,YAAY,CAACO,MAAM,CAAC,UAAUC,GAAG,EAAE;MACxC,OAAOA,GAAG;IACZ,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;EACd,CAAC;EACD,OAAO;IACLC,eAAe,EAAEA,eAAe;IAChCM,KAAK,EAAE5B,UAAU;IACjBC,MAAM,EAAEA,MAAM;IACd0B,UAAU,EAAEA;EACd,CAAC;AACH;AACA,eAAevB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}