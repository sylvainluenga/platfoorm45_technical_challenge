{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React, { useState, useCallback, useRef } from 'react';\nimport addStyle from 'dom-lib/addStyle';\nimport addClass from 'dom-lib/addClass';\nimport removeClass from 'dom-lib/removeClass';\nimport omit from 'lodash/omit';\nimport merge from 'lodash/merge';\nimport { SCROLLBAR_WIDTH, SORT_TYPE } from '../constants';\nimport useControlled from './useControlled';\nimport getTableColumns from './getTableColumns';\nimport getTotalByColumns from './getTotalByColumns';\nimport getColumnProps from './getColumnProps';\nimport useUpdateEffect from './useUpdateEffect';\nimport flushSync from './flushSync';\nimport useMount from './useMount';\n/**\n * Attach rendering-related attributes to all cells of the form and cache them.\n * @param props\n * @returns\n */\nvar useCellDescriptor = function useCellDescriptor(props) {\n  var children = props.children,\n    rtl = props.rtl,\n    mouseAreaRef = props.mouseAreaRef,\n    tableRef = props.tableRef,\n    minScrollX = props.minScrollX,\n    scrollX = props.scrollX,\n    tableWidth = props.tableWidth,\n    headerHeight = props.headerHeight,\n    showHeader = props.showHeader,\n    sortTypeProp = props.sortType,\n    defaultSortType = props.defaultSortType,\n    sortColumn = props.sortColumn,\n    rowHeight = props.rowHeight,\n    onSortColumn = props.onSortColumn,\n    onHeaderCellResize = props.onHeaderCellResize,\n    prefix = props.prefix;\n  var _useControlled = useControlled(sortTypeProp, defaultSortType),\n    sortType = _useControlled[0],\n    setSortType = _useControlled[1];\n  var _useState = useState(),\n    cacheData = _useState[0],\n    setCacheData = _useState[1];\n  var clearCache = useCallback(function () {\n    setCacheData(null);\n  }, []);\n  var setColumnResizing = useCallback(function (resizing) {\n    if (!tableRef.current) {\n      return;\n    }\n    if (resizing) {\n      addClass(tableRef.current, prefix('column-resizing'));\n    } else {\n      removeClass(tableRef.current, prefix('column-resizing'));\n    }\n  }, [prefix, tableRef]);\n\n  /**\n   * storage column width from props.\n   * if current column width not equal initial column width, use current column width and update cache.\n   */\n  var initialColumnWidths = useRef({});\n  var columnWidths = useRef({});\n  useMount(function () {\n    // As the cells are cached before the table width is updated, it is necessary to clear the cache again. fix: #430\n    clearCache();\n  });\n  useUpdateEffect(function () {\n    clearCache();\n  }, [children, sortColumn, sortType, tableWidth.current, scrollX.current, minScrollX.current]);\n  var handleColumnResizeEnd = useCallback(function (columnWidth, _cursorDelta, dataKey, index) {\n    columnWidths.current[dataKey + \"_\" + index + \"_width\"] = columnWidth;\n    setColumnResizing(false);\n    if (mouseAreaRef.current) {\n      addStyle(mouseAreaRef.current, {\n        display: 'none'\n      });\n    }\n\n    // fix: https://github.com/rsuite/rsuite-table/issues/398\n    flushSync(function () {\n      return clearCache();\n    });\n    onHeaderCellResize === null || onHeaderCellResize === void 0 ? void 0 : onHeaderCellResize(columnWidth, dataKey);\n  }, [clearCache, mouseAreaRef, onHeaderCellResize, setColumnResizing]);\n  var handleColumnResizeMove = useCallback(function (width, left, fixed) {\n    var mouseAreaLeft = width + left;\n    var x = mouseAreaLeft;\n    var dir = 'left';\n    if (rtl) {\n      mouseAreaLeft += minScrollX.current + SCROLLBAR_WIDTH;\n      dir = 'right';\n    }\n    if (!fixed) {\n      x = mouseAreaLeft + (rtl ? -scrollX.current : scrollX.current);\n    }\n    if (mouseAreaRef.current) {\n      var _addStyle;\n      addStyle(mouseAreaRef.current, (_addStyle = {\n        display: 'block'\n      }, _addStyle[dir] = x + \"px\", _addStyle));\n    }\n  }, [minScrollX, mouseAreaRef, rtl, scrollX]);\n  var handleColumnResizeStart = useCallback(function (width, left, fixed) {\n    setColumnResizing(true);\n    handleColumnResizeMove(width, left, fixed);\n  }, [handleColumnResizeMove, setColumnResizing]);\n  var handleSortColumn = useCallback(function (dataKey) {\n    var nextSortType = sortType;\n    if (sortColumn === dataKey) {\n      nextSortType = sortType === SORT_TYPE.ASC ? SORT_TYPE.DESC : SORT_TYPE.ASC;\n      setSortType(nextSortType);\n    }\n    onSortColumn === null || onSortColumn === void 0 ? void 0 : onSortColumn(dataKey, nextSortType);\n  }, [onSortColumn, setSortType, sortColumn, sortType]);\n  if (cacheData) {\n    return cacheData;\n  }\n  var hasCustomTreeCol = false;\n  var left = 0; // Cell left margin\n  var headerCells = []; // Table header cell\n  var bodyCells = []; // Table body cell\n\n  if (!children) {\n    var _cacheCell = {\n      columns: [],\n      headerCells: headerCells,\n      bodyCells: bodyCells,\n      hasCustomTreeCol: hasCustomTreeCol,\n      allColumnsWidth: left\n    };\n    setCacheData(_cacheCell);\n    return _cacheCell;\n  }\n  var columns = getTableColumns(children);\n  var count = columns.length;\n  var _getTotalByColumns = getTotalByColumns(columns),\n    totalFlexGrow = _getTotalByColumns.totalFlexGrow,\n    totalWidth = _getTotalByColumns.totalWidth;\n  React.Children.forEach(columns, function (column, index) {\n    if (/*#__PURE__*/React.isValidElement(column)) {\n      var _initialColumnWidths$, _columnWidths$current;\n      var columnChildren = column.props.children;\n      var columnProps = getColumnProps(column);\n      var width = columnProps.width,\n        resizable = columnProps.resizable,\n        flexGrow = columnProps.flexGrow,\n        minWidth = columnProps.minWidth,\n        onResize = columnProps.onResize,\n        treeCol = columnProps.treeCol;\n      if (treeCol) {\n        hasCustomTreeCol = true;\n      }\n      if (columnChildren.length !== 2) {\n        throw new Error(\"Component <HeaderCell> and <Cell> is required, column index: \" + index + \" \");\n      }\n      var headerCell = columnChildren[0];\n      var cell = columnChildren[1];\n      var cellWidthId = cell.props.dataKey + \"_\" + index + \"_width\";\n\n      // get column width from cache.\n      var initialColumnWidth = (_initialColumnWidths$ = initialColumnWidths.current) === null || _initialColumnWidths$ === void 0 ? void 0 : _initialColumnWidths$[cellWidthId];\n      var currentWidth = (_columnWidths$current = columnWidths.current) === null || _columnWidths$current === void 0 ? void 0 : _columnWidths$current[cellWidthId];\n      var cellWidth = currentWidth || width || 0;\n      var isControlled = typeof width === 'number' && typeof onResize === 'function';\n\n      /**\n       * in resizable mode,\n       *    if width !== initialColumnWidth, use current column width and update cache.\n       */\n      if (resizable && (initialColumnWidth || width) && initialColumnWidth !== width) {\n        // initial or update initialColumnWidth cache.\n        initialColumnWidths.current[cellWidthId] = width;\n        /**\n         * if currentWidth exist, update columnWidths cache.\n         */\n        if (currentWidth) {\n          columnWidths.current[cellWidthId] = width;\n          // update cellWidth\n          cellWidth = width;\n        }\n      }\n      if (tableWidth.current && flexGrow && totalFlexGrow) {\n        var grewWidth = Math.max((tableWidth.current - totalWidth) / totalFlexGrow * flexGrow, minWidth || 60);\n        /**\n         * resizable = false, width will be recalc when table render.\n         * resizable = true, only first render will use grewWidth.\n         */\n        cellWidth = resizable ? currentWidth || grewWidth : grewWidth;\n      }\n      var cellProps = _extends({}, omit(columnProps, ['children']), {\n        'aria-colindex': index + 1,\n        left: left,\n        headerHeight: headerHeight,\n        key: index,\n        width: isControlled ? width : cellWidth,\n        height: typeof rowHeight === 'function' ? rowHeight() : rowHeight,\n        firstColumn: index === 0,\n        lastColumn: index === count - 1\n      });\n      if (showHeader && headerHeight) {\n        var headerCellProps = {\n          // Resizable column\n          // `index` is used to define the serial number when dragging the column width\n          index: index,\n          dataKey: cell.props.dataKey,\n          isHeaderCell: true,\n          minWidth: columnProps.minWidth,\n          sortable: columnProps.sortable,\n          onSortColumn: handleSortColumn,\n          sortType: sortType,\n          sortColumn: sortColumn,\n          flexGrow: resizable ? undefined : flexGrow\n        };\n        if (resizable) {\n          merge(headerCellProps, {\n            onResize: onResize,\n            onColumnResizeEnd: handleColumnResizeEnd,\n            onColumnResizeStart: handleColumnResizeStart,\n            onColumnResizeMove: handleColumnResizeMove\n          });\n        }\n        headerCells.push(/*#__PURE__*/React.cloneElement(headerCell, _extends({}, cellProps, headerCellProps)));\n      }\n      bodyCells.push(/*#__PURE__*/React.cloneElement(cell, cellProps));\n      left += cellWidth;\n    }\n  });\n  var cacheCell = {\n    columns: columns,\n    headerCells: headerCells,\n    bodyCells: bodyCells,\n    allColumnsWidth: left,\n    hasCustomTreeCol: hasCustomTreeCol\n  };\n  setCacheData(cacheCell);\n  return cacheCell;\n};\nexport default useCellDescriptor;","map":{"version":3,"names":["_extends","React","useState","useCallback","useRef","addStyle","addClass","removeClass","omit","merge","SCROLLBAR_WIDTH","SORT_TYPE","useControlled","getTableColumns","getTotalByColumns","getColumnProps","useUpdateEffect","flushSync","useMount","useCellDescriptor","props","children","rtl","mouseAreaRef","tableRef","minScrollX","scrollX","tableWidth","headerHeight","showHeader","sortTypeProp","sortType","defaultSortType","sortColumn","rowHeight","onSortColumn","onHeaderCellResize","prefix","_useControlled","setSortType","_useState","cacheData","setCacheData","clearCache","setColumnResizing","resizing","current","initialColumnWidths","columnWidths","handleColumnResizeEnd","columnWidth","_cursorDelta","dataKey","index","display","handleColumnResizeMove","width","left","fixed","mouseAreaLeft","x","dir","_addStyle","handleColumnResizeStart","handleSortColumn","nextSortType","ASC","DESC","hasCustomTreeCol","headerCells","bodyCells","_cacheCell","columns","allColumnsWidth","count","length","_getTotalByColumns","totalFlexGrow","totalWidth","Children","forEach","column","isValidElement","_initialColumnWidths$","_columnWidths$current","columnChildren","columnProps","resizable","flexGrow","minWidth","onResize","treeCol","Error","headerCell","cell","cellWidthId","initialColumnWidth","currentWidth","cellWidth","isControlled","grewWidth","Math","max","cellProps","key","height","firstColumn","lastColumn","headerCellProps","isHeaderCell","sortable","undefined","onColumnResizeEnd","onColumnResizeStart","onColumnResizeMove","push","cloneElement","cacheCell"],"sources":["C:/Users/lenovo/OneDrive/Documents/local project/platfoorm45_technical_challenge/node_modules/rsuite-table/es/utils/useCellDescriptor.js"],"sourcesContent":["'use client';\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React, { useState, useCallback, useRef } from 'react';\nimport addStyle from 'dom-lib/addStyle';\nimport addClass from 'dom-lib/addClass';\nimport removeClass from 'dom-lib/removeClass';\nimport omit from 'lodash/omit';\nimport merge from 'lodash/merge';\nimport { SCROLLBAR_WIDTH, SORT_TYPE } from '../constants';\nimport useControlled from './useControlled';\nimport getTableColumns from './getTableColumns';\nimport getTotalByColumns from './getTotalByColumns';\nimport getColumnProps from './getColumnProps';\nimport useUpdateEffect from './useUpdateEffect';\nimport flushSync from './flushSync';\nimport useMount from './useMount';\n/**\n * Attach rendering-related attributes to all cells of the form and cache them.\n * @param props\n * @returns\n */\nvar useCellDescriptor = function useCellDescriptor(props) {\n  var children = props.children,\n    rtl = props.rtl,\n    mouseAreaRef = props.mouseAreaRef,\n    tableRef = props.tableRef,\n    minScrollX = props.minScrollX,\n    scrollX = props.scrollX,\n    tableWidth = props.tableWidth,\n    headerHeight = props.headerHeight,\n    showHeader = props.showHeader,\n    sortTypeProp = props.sortType,\n    defaultSortType = props.defaultSortType,\n    sortColumn = props.sortColumn,\n    rowHeight = props.rowHeight,\n    onSortColumn = props.onSortColumn,\n    onHeaderCellResize = props.onHeaderCellResize,\n    prefix = props.prefix;\n  var _useControlled = useControlled(sortTypeProp, defaultSortType),\n    sortType = _useControlled[0],\n    setSortType = _useControlled[1];\n  var _useState = useState(),\n    cacheData = _useState[0],\n    setCacheData = _useState[1];\n  var clearCache = useCallback(function () {\n    setCacheData(null);\n  }, []);\n  var setColumnResizing = useCallback(function (resizing) {\n    if (!tableRef.current) {\n      return;\n    }\n    if (resizing) {\n      addClass(tableRef.current, prefix('column-resizing'));\n    } else {\n      removeClass(tableRef.current, prefix('column-resizing'));\n    }\n  }, [prefix, tableRef]);\n\n  /**\n   * storage column width from props.\n   * if current column width not equal initial column width, use current column width and update cache.\n   */\n  var initialColumnWidths = useRef({});\n  var columnWidths = useRef({});\n  useMount(function () {\n    // As the cells are cached before the table width is updated, it is necessary to clear the cache again. fix: #430\n    clearCache();\n  });\n  useUpdateEffect(function () {\n    clearCache();\n  }, [children, sortColumn, sortType, tableWidth.current, scrollX.current, minScrollX.current]);\n  var handleColumnResizeEnd = useCallback(function (columnWidth, _cursorDelta, dataKey, index) {\n    columnWidths.current[dataKey + \"_\" + index + \"_width\"] = columnWidth;\n    setColumnResizing(false);\n    if (mouseAreaRef.current) {\n      addStyle(mouseAreaRef.current, {\n        display: 'none'\n      });\n    }\n\n    // fix: https://github.com/rsuite/rsuite-table/issues/398\n    flushSync(function () {\n      return clearCache();\n    });\n    onHeaderCellResize === null || onHeaderCellResize === void 0 ? void 0 : onHeaderCellResize(columnWidth, dataKey);\n  }, [clearCache, mouseAreaRef, onHeaderCellResize, setColumnResizing]);\n  var handleColumnResizeMove = useCallback(function (width, left, fixed) {\n    var mouseAreaLeft = width + left;\n    var x = mouseAreaLeft;\n    var dir = 'left';\n    if (rtl) {\n      mouseAreaLeft += minScrollX.current + SCROLLBAR_WIDTH;\n      dir = 'right';\n    }\n    if (!fixed) {\n      x = mouseAreaLeft + (rtl ? -scrollX.current : scrollX.current);\n    }\n    if (mouseAreaRef.current) {\n      var _addStyle;\n      addStyle(mouseAreaRef.current, (_addStyle = {\n        display: 'block'\n      }, _addStyle[dir] = x + \"px\", _addStyle));\n    }\n  }, [minScrollX, mouseAreaRef, rtl, scrollX]);\n  var handleColumnResizeStart = useCallback(function (width, left, fixed) {\n    setColumnResizing(true);\n    handleColumnResizeMove(width, left, fixed);\n  }, [handleColumnResizeMove, setColumnResizing]);\n  var handleSortColumn = useCallback(function (dataKey) {\n    var nextSortType = sortType;\n    if (sortColumn === dataKey) {\n      nextSortType = sortType === SORT_TYPE.ASC ? SORT_TYPE.DESC : SORT_TYPE.ASC;\n      setSortType(nextSortType);\n    }\n    onSortColumn === null || onSortColumn === void 0 ? void 0 : onSortColumn(dataKey, nextSortType);\n  }, [onSortColumn, setSortType, sortColumn, sortType]);\n  if (cacheData) {\n    return cacheData;\n  }\n  var hasCustomTreeCol = false;\n  var left = 0; // Cell left margin\n  var headerCells = []; // Table header cell\n  var bodyCells = []; // Table body cell\n\n  if (!children) {\n    var _cacheCell = {\n      columns: [],\n      headerCells: headerCells,\n      bodyCells: bodyCells,\n      hasCustomTreeCol: hasCustomTreeCol,\n      allColumnsWidth: left\n    };\n    setCacheData(_cacheCell);\n    return _cacheCell;\n  }\n  var columns = getTableColumns(children);\n  var count = columns.length;\n  var _getTotalByColumns = getTotalByColumns(columns),\n    totalFlexGrow = _getTotalByColumns.totalFlexGrow,\n    totalWidth = _getTotalByColumns.totalWidth;\n  React.Children.forEach(columns, function (column, index) {\n    if ( /*#__PURE__*/React.isValidElement(column)) {\n      var _initialColumnWidths$, _columnWidths$current;\n      var columnChildren = column.props.children;\n      var columnProps = getColumnProps(column);\n      var width = columnProps.width,\n        resizable = columnProps.resizable,\n        flexGrow = columnProps.flexGrow,\n        minWidth = columnProps.minWidth,\n        onResize = columnProps.onResize,\n        treeCol = columnProps.treeCol;\n      if (treeCol) {\n        hasCustomTreeCol = true;\n      }\n      if (columnChildren.length !== 2) {\n        throw new Error(\"Component <HeaderCell> and <Cell> is required, column index: \" + index + \" \");\n      }\n      var headerCell = columnChildren[0];\n      var cell = columnChildren[1];\n      var cellWidthId = cell.props.dataKey + \"_\" + index + \"_width\";\n\n      // get column width from cache.\n      var initialColumnWidth = (_initialColumnWidths$ = initialColumnWidths.current) === null || _initialColumnWidths$ === void 0 ? void 0 : _initialColumnWidths$[cellWidthId];\n      var currentWidth = (_columnWidths$current = columnWidths.current) === null || _columnWidths$current === void 0 ? void 0 : _columnWidths$current[cellWidthId];\n      var cellWidth = currentWidth || width || 0;\n      var isControlled = typeof width === 'number' && typeof onResize === 'function';\n\n      /**\n       * in resizable mode,\n       *    if width !== initialColumnWidth, use current column width and update cache.\n       */\n      if (resizable && (initialColumnWidth || width) && initialColumnWidth !== width) {\n        // initial or update initialColumnWidth cache.\n        initialColumnWidths.current[cellWidthId] = width;\n        /**\n         * if currentWidth exist, update columnWidths cache.\n         */\n        if (currentWidth) {\n          columnWidths.current[cellWidthId] = width;\n          // update cellWidth\n          cellWidth = width;\n        }\n      }\n      if (tableWidth.current && flexGrow && totalFlexGrow) {\n        var grewWidth = Math.max((tableWidth.current - totalWidth) / totalFlexGrow * flexGrow, minWidth || 60);\n        /**\n         * resizable = false, width will be recalc when table render.\n         * resizable = true, only first render will use grewWidth.\n         */\n        cellWidth = resizable ? currentWidth || grewWidth : grewWidth;\n      }\n      var cellProps = _extends({}, omit(columnProps, ['children']), {\n        'aria-colindex': index + 1,\n        left: left,\n        headerHeight: headerHeight,\n        key: index,\n        width: isControlled ? width : cellWidth,\n        height: typeof rowHeight === 'function' ? rowHeight() : rowHeight,\n        firstColumn: index === 0,\n        lastColumn: index === count - 1\n      });\n      if (showHeader && headerHeight) {\n        var headerCellProps = {\n          // Resizable column\n          // `index` is used to define the serial number when dragging the column width\n          index: index,\n          dataKey: cell.props.dataKey,\n          isHeaderCell: true,\n          minWidth: columnProps.minWidth,\n          sortable: columnProps.sortable,\n          onSortColumn: handleSortColumn,\n          sortType: sortType,\n          sortColumn: sortColumn,\n          flexGrow: resizable ? undefined : flexGrow\n        };\n        if (resizable) {\n          merge(headerCellProps, {\n            onResize: onResize,\n            onColumnResizeEnd: handleColumnResizeEnd,\n            onColumnResizeStart: handleColumnResizeStart,\n            onColumnResizeMove: handleColumnResizeMove\n          });\n        }\n        headerCells.push( /*#__PURE__*/React.cloneElement(headerCell, _extends({}, cellProps, headerCellProps)));\n      }\n      bodyCells.push( /*#__PURE__*/React.cloneElement(cell, cellProps));\n      left += cellWidth;\n    }\n  });\n  var cacheCell = {\n    columns: columns,\n    headerCells: headerCells,\n    bodyCells: bodyCells,\n    allColumnsWidth: left,\n    hasCustomTreeCol: hasCustomTreeCol\n  };\n  setCacheData(cacheCell);\n  return cacheCell;\n};\nexport default useCellDescriptor;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}