{"ast":null,"code":"import formatErrorMessage, { joinName } from './formatErrorMessage';\n/**\n * Create a data asynchronous validator\n * @param data\n */\nexport function createValidatorAsync(data, name, label) {\n  function check(errorMessage) {\n    return checkResult => {\n      if (checkResult === false) {\n        return {\n          hasError: true,\n          errorMessage\n        };\n      } else if (typeof checkResult === 'object' && (checkResult.hasError || checkResult.array)) {\n        return checkResult;\n      }\n      return null;\n    };\n  }\n  return (value, rules) => {\n    const promises = rules.map(rule => {\n      const {\n        onValid,\n        errorMessage,\n        params\n      } = rule;\n      const errorMsg = typeof errorMessage === 'function' ? errorMessage() : errorMessage;\n      return Promise.resolve(onValid(value, data, name)).then(check(formatErrorMessage(errorMsg, {\n        ...params,\n        name: label || joinName(name)\n      })));\n    });\n    return Promise.all(promises).then(results => results.find(item => item && (item === null || item === void 0 ? void 0 : item.hasError)));\n  };\n}\nexport default createValidatorAsync;","map":{"version":3,"names":["formatErrorMessage","joinName","createValidatorAsync","data","name","label","check","errorMessage","checkResult","hasError","array","value","rules","promises","map","rule","onValid","params","errorMsg","Promise","resolve","then","all","results","find","item"],"sources":["C:\\Users\\lenovo\\OneDrive\\Documents\\local project\\platfoorm45_technical_challenge\\node_modules\\schema-typed\\src\\utils\\createValidatorAsync.ts"],"sourcesContent":["import { CheckResult, RuleType } from '../types';\nimport formatErrorMessage, { joinName } from './formatErrorMessage';\n\n/**\n * Create a data asynchronous validator\n * @param data\n */\nexport function createValidatorAsync<V, D, E>(data?: D, name?: string | string[], label?: string) {\n  function check(errorMessage?: E | string) {\n    return (checkResult: CheckResult<E> | boolean): CheckResult<E> | null => {\n      if (checkResult === false) {\n        return { hasError: true, errorMessage };\n      } else if (typeof checkResult === 'object' && (checkResult.hasError || checkResult.array)) {\n        return checkResult;\n      }\n      return null;\n    };\n  }\n\n  return (value: V, rules: RuleType<V, D, E>[]) => {\n    const promises = rules.map(rule => {\n      const { onValid, errorMessage, params } = rule;\n      const errorMsg = typeof errorMessage === 'function' ? errorMessage() : errorMessage;\n\n      return Promise.resolve(onValid(value, data, name)).then(\n        check(\n          formatErrorMessage<E>(errorMsg, {\n            ...params,\n            name: label || joinName(name)\n          })\n        )\n      );\n    });\n\n    return Promise.all(promises).then(results =>\n      results.find((item: CheckResult<E> | null) => item && item?.hasError)\n    );\n  };\n}\n\nexport default createValidatorAsync;\n"],"mappings":"AACA,OAAOA,kBAAkB,IAAIC,QAAQ,QAAQ,sBAAsB;AAEnE;;;;AAIA,OAAM,SAAUC,oBAAoBA,CAAUC,IAAQ,EAAEC,IAAwB,EAAEC,KAAc;EAC9F,SAASC,KAAKA,CAACC,YAAyB;IACtC,OAAQC,WAAqC,IAA2B;MACtE,IAAIA,WAAW,KAAK,KAAK,EAAE;QACzB,OAAO;UAAEC,QAAQ,EAAE,IAAI;UAAEF;QAAY,CAAE;OACxC,MAAM,IAAI,OAAOC,WAAW,KAAK,QAAQ,KAAKA,WAAW,CAACC,QAAQ,IAAID,WAAW,CAACE,KAAK,CAAC,EAAE;QACzF,OAAOF,WAAW;;MAEpB,OAAO,IAAI;IACb,CAAC;EACH;EAEA,OAAO,CAACG,KAAQ,EAAEC,KAA0B,KAAI;IAC9C,MAAMC,QAAQ,GAAGD,KAAK,CAACE,GAAG,CAACC,IAAI,IAAG;MAChC,MAAM;QAAEC,OAAO;QAAET,YAAY;QAAEU;MAAM,CAAE,GAAGF,IAAI;MAC9C,MAAMG,QAAQ,GAAG,OAAOX,YAAY,KAAK,UAAU,GAAGA,YAAY,EAAE,GAAGA,YAAY;MAEnF,OAAOY,OAAO,CAACC,OAAO,CAACJ,OAAO,CAACL,KAAK,EAAER,IAAI,EAAEC,IAAI,CAAC,CAAC,CAACiB,IAAI,CACrDf,KAAK,CACHN,kBAAkB,CAAIkB,QAAQ,EAAE;QAC9B,GAAGD,MAAM;QACTb,IAAI,EAAEC,KAAK,IAAIJ,QAAQ,CAACG,IAAI;OAC7B,CAAC,CACH,CACF;IACH,CAAC,CAAC;IAEF,OAAOe,OAAO,CAACG,GAAG,CAACT,QAAQ,CAAC,CAACQ,IAAI,CAACE,OAAO,IACvCA,OAAO,CAACC,IAAI,CAAEC,IAA2B,IAAKA,IAAI,KAAIA,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEhB,QAAQ,EAAC,CACtE;EACH,CAAC;AACH;AAEA,eAAeP,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}