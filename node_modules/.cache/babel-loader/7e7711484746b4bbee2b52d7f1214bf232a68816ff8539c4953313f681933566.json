{"ast":null,"code":"'use client';\n\nimport { useState, useCallback } from 'react';\nimport { isValid } from \"../../internals/utils/date/index.js\";\nimport Input from \"../../Input/index.js\";\nimport DateInput from \"../../DateInput/index.js\";\nimport DateRangeInput from \"../../DateRangeInput/index.js\";\nfunction useCustomizedInput(props) {\n  var value = props.value,\n    formatStr = props.formatStr,\n    readOnly = props.readOnly,\n    editable = props.editable,\n    loading = props.loading,\n    _props$mode = props.mode,\n    mode = _props$mode === void 0 ? 'date' : _props$mode,\n    renderValue = props.renderValue;\n  var _useState = useState(false),\n    active = _useState[0],\n    setActive = _useState[1];\n  var onActive = useCallback(function () {\n    return setActive(true);\n  }, []);\n  var onInactive = useCallback(function () {\n    return setActive(false);\n  }, []);\n\n  // Custom rendering of the selected value\n  var customValue = null;\n\n  // Input box is read-only when the component is uneditable or loading state\n  var inputReadOnly = readOnly || !editable || loading || false;\n\n  // If the component is not active or editable, the custom rendering value is displayed\n  var customized = !active || !editable;\n  if (typeof renderValue === 'function' && value && customized) {\n    if (Array.isArray(value) ? value.every(isValid) : isValid(value)) {\n      customValue = renderValue(value, formatStr);\n\n      // If the custom rendering value, the input box is read-only\n      inputReadOnly = true;\n    }\n  }\n  var TargetInput = mode === 'dateRange' ? DateRangeInput : DateInput;\n  var CustomizedInput = customValue ? Input : TargetInput;\n  return {\n    customValue: customValue,\n    Input: CustomizedInput,\n    inputReadOnly: inputReadOnly,\n    events: {\n      onActive: onActive,\n      onInactive: onInactive\n    }\n  };\n}\nexport default useCustomizedInput;","map":{"version":3,"names":["useState","useCallback","isValid","Input","DateInput","DateRangeInput","useCustomizedInput","props","value","formatStr","readOnly","editable","loading","_props$mode","mode","renderValue","_useState","active","setActive","onActive","onInactive","customValue","inputReadOnly","customized","Array","isArray","every","TargetInput","CustomizedInput","events"],"sources":["C:/Users/lenovo/OneDrive/Documents/local project/platfoorm45_technical_challenge/node_modules/rsuite/esm/DatePicker/hooks/useCustomizedInput.js"],"sourcesContent":["'use client';\nimport { useState, useCallback } from 'react';\nimport { isValid } from \"../../internals/utils/date/index.js\";\nimport Input from \"../../Input/index.js\";\nimport DateInput from \"../../DateInput/index.js\";\nimport DateRangeInput from \"../../DateRangeInput/index.js\";\nfunction useCustomizedInput(props) {\n  var value = props.value,\n    formatStr = props.formatStr,\n    readOnly = props.readOnly,\n    editable = props.editable,\n    loading = props.loading,\n    _props$mode = props.mode,\n    mode = _props$mode === void 0 ? 'date' : _props$mode,\n    renderValue = props.renderValue;\n  var _useState = useState(false),\n    active = _useState[0],\n    setActive = _useState[1];\n  var onActive = useCallback(function () {\n    return setActive(true);\n  }, []);\n  var onInactive = useCallback(function () {\n    return setActive(false);\n  }, []);\n\n  // Custom rendering of the selected value\n  var customValue = null;\n\n  // Input box is read-only when the component is uneditable or loading state\n  var inputReadOnly = readOnly || !editable || loading || false;\n\n  // If the component is not active or editable, the custom rendering value is displayed\n  var customized = !active || !editable;\n  if (typeof renderValue === 'function' && value && customized) {\n    if (Array.isArray(value) ? value.every(isValid) : isValid(value)) {\n      customValue = renderValue(value, formatStr);\n\n      // If the custom rendering value, the input box is read-only\n      inputReadOnly = true;\n    }\n  }\n  var TargetInput = mode === 'dateRange' ? DateRangeInput : DateInput;\n  var CustomizedInput = customValue ? Input : TargetInput;\n  return {\n    customValue: customValue,\n    Input: CustomizedInput,\n    inputReadOnly: inputReadOnly,\n    events: {\n      onActive: onActive,\n      onInactive: onInactive\n    }\n  };\n}\nexport default useCustomizedInput;"],"mappings":"AAAA,YAAY;;AACZ,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C,SAASC,OAAO,QAAQ,qCAAqC;AAC7D,OAAOC,KAAK,MAAM,sBAAsB;AACxC,OAAOC,SAAS,MAAM,0BAA0B;AAChD,OAAOC,cAAc,MAAM,+BAA+B;AAC1D,SAASC,kBAAkBA,CAACC,KAAK,EAAE;EACjC,IAAIC,KAAK,GAAGD,KAAK,CAACC,KAAK;IACrBC,SAAS,GAAGF,KAAK,CAACE,SAAS;IAC3BC,QAAQ,GAAGH,KAAK,CAACG,QAAQ;IACzBC,QAAQ,GAAGJ,KAAK,CAACI,QAAQ;IACzBC,OAAO,GAAGL,KAAK,CAACK,OAAO;IACvBC,WAAW,GAAGN,KAAK,CAACO,IAAI;IACxBA,IAAI,GAAGD,WAAW,KAAK,KAAK,CAAC,GAAG,MAAM,GAAGA,WAAW;IACpDE,WAAW,GAAGR,KAAK,CAACQ,WAAW;EACjC,IAAIC,SAAS,GAAGhB,QAAQ,CAAC,KAAK,CAAC;IAC7BiB,MAAM,GAAGD,SAAS,CAAC,CAAC,CAAC;IACrBE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC;EAC1B,IAAIG,QAAQ,GAAGlB,WAAW,CAAC,YAAY;IACrC,OAAOiB,SAAS,CAAC,IAAI,CAAC;EACxB,CAAC,EAAE,EAAE,CAAC;EACN,IAAIE,UAAU,GAAGnB,WAAW,CAAC,YAAY;IACvC,OAAOiB,SAAS,CAAC,KAAK,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,IAAIG,WAAW,GAAG,IAAI;;EAEtB;EACA,IAAIC,aAAa,GAAGZ,QAAQ,IAAI,CAACC,QAAQ,IAAIC,OAAO,IAAI,KAAK;;EAE7D;EACA,IAAIW,UAAU,GAAG,CAACN,MAAM,IAAI,CAACN,QAAQ;EACrC,IAAI,OAAOI,WAAW,KAAK,UAAU,IAAIP,KAAK,IAAIe,UAAU,EAAE;IAC5D,IAAIC,KAAK,CAACC,OAAO,CAACjB,KAAK,CAAC,GAAGA,KAAK,CAACkB,KAAK,CAACxB,OAAO,CAAC,GAAGA,OAAO,CAACM,KAAK,CAAC,EAAE;MAChEa,WAAW,GAAGN,WAAW,CAACP,KAAK,EAAEC,SAAS,CAAC;;MAE3C;MACAa,aAAa,GAAG,IAAI;IACtB;EACF;EACA,IAAIK,WAAW,GAAGb,IAAI,KAAK,WAAW,GAAGT,cAAc,GAAGD,SAAS;EACnE,IAAIwB,eAAe,GAAGP,WAAW,GAAGlB,KAAK,GAAGwB,WAAW;EACvD,OAAO;IACLN,WAAW,EAAEA,WAAW;IACxBlB,KAAK,EAAEyB,eAAe;IACtBN,aAAa,EAAEA,aAAa;IAC5BO,MAAM,EAAE;MACNV,QAAQ,EAAEA,QAAQ;MAClBC,UAAU,EAAEA;IACd;EACF,CAAC;AACH;AACA,eAAed,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}