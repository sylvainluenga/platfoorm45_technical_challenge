{"ast":null,"code":"'use client';\n\nimport ReactDOM from 'react-dom';\nfunction safeFindDOMNode(componentOrElement) {\n  if (componentOrElement && 'setState' in componentOrElement) {\n    // eslint-disable-next-line react/no-find-dom-node\n    return ReactDOM.findDOMNode(componentOrElement);\n  }\n  return componentOrElement !== null && componentOrElement !== void 0 ? componentOrElement : null;\n}\nvar getRefTarget = function getRefTarget(ref) {\n  return ref && ('current' in ref ? ref.current : ref);\n};\nexport function getDOMNode(elementOrRef) {\n  // If elementOrRef is an instance of Position, child is returned. [PositionInstance]\n  var element = (elementOrRef === null || elementOrRef === void 0 ? void 0 : elementOrRef.root) || (elementOrRef === null || elementOrRef === void 0 ? void 0 : elementOrRef.child) || getRefTarget(elementOrRef);\n\n  // Native HTML elements\n  if (element !== null && element !== void 0 && element.nodeType && typeof (element === null || element === void 0 ? void 0 : element.nodeName) === 'string') {\n    return element;\n  }\n\n  // If you can't get the native HTML element, you can only get it through findDOMNode.\n  // eslint-disable-next-line react/no-find-dom-node\n  return safeFindDOMNode(element);\n}\nexport default getDOMNode;","map":{"version":3,"names":["ReactDOM","safeFindDOMNode","componentOrElement","findDOMNode","getRefTarget","ref","current","getDOMNode","elementOrRef","element","root","child","nodeType","nodeName"],"sources":["C:/Users/lenovo/OneDrive/Documents/local project/platfoorm45_technical_challenge/node_modules/rsuite/esm/internals/utils/getDOMNode.js"],"sourcesContent":["'use client';\nimport ReactDOM from 'react-dom';\nfunction safeFindDOMNode(componentOrElement) {\n  if (componentOrElement && 'setState' in componentOrElement) {\n    // eslint-disable-next-line react/no-find-dom-node\n    return ReactDOM.findDOMNode(componentOrElement);\n  }\n  return componentOrElement !== null && componentOrElement !== void 0 ? componentOrElement : null;\n}\nvar getRefTarget = function getRefTarget(ref) {\n  return ref && ('current' in ref ? ref.current : ref);\n};\nexport function getDOMNode(elementOrRef) {\n  // If elementOrRef is an instance of Position, child is returned. [PositionInstance]\n  var element = (elementOrRef === null || elementOrRef === void 0 ? void 0 : elementOrRef.root) || (elementOrRef === null || elementOrRef === void 0 ? void 0 : elementOrRef.child) || getRefTarget(elementOrRef);\n\n  // Native HTML elements\n  if (element !== null && element !== void 0 && element.nodeType && typeof (element === null || element === void 0 ? void 0 : element.nodeName) === 'string') {\n    return element;\n  }\n\n  // If you can't get the native HTML element, you can only get it through findDOMNode.\n  // eslint-disable-next-line react/no-find-dom-node\n  return safeFindDOMNode(element);\n}\nexport default getDOMNode;"],"mappings":"AAAA,YAAY;;AACZ,OAAOA,QAAQ,MAAM,WAAW;AAChC,SAASC,eAAeA,CAACC,kBAAkB,EAAE;EAC3C,IAAIA,kBAAkB,IAAI,UAAU,IAAIA,kBAAkB,EAAE;IAC1D;IACA,OAAOF,QAAQ,CAACG,WAAW,CAACD,kBAAkB,CAAC;EACjD;EACA,OAAOA,kBAAkB,KAAK,IAAI,IAAIA,kBAAkB,KAAK,KAAK,CAAC,GAAGA,kBAAkB,GAAG,IAAI;AACjG;AACA,IAAIE,YAAY,GAAG,SAASA,YAAYA,CAACC,GAAG,EAAE;EAC5C,OAAOA,GAAG,KAAK,SAAS,IAAIA,GAAG,GAAGA,GAAG,CAACC,OAAO,GAAGD,GAAG,CAAC;AACtD,CAAC;AACD,OAAO,SAASE,UAAUA,CAACC,YAAY,EAAE;EACvC;EACA,IAAIC,OAAO,GAAG,CAACD,YAAY,KAAK,IAAI,IAAIA,YAAY,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,YAAY,CAACE,IAAI,MAAMF,YAAY,KAAK,IAAI,IAAIA,YAAY,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,YAAY,CAACG,KAAK,CAAC,IAAIP,YAAY,CAACI,YAAY,CAAC;;EAE/M;EACA,IAAIC,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,IAAIA,OAAO,CAACG,QAAQ,IAAI,QAAQH,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACI,QAAQ,CAAC,KAAK,QAAQ,EAAE;IAC1J,OAAOJ,OAAO;EAChB;;EAEA;EACA;EACA,OAAOR,eAAe,CAACQ,OAAO,CAAC;AACjC;AACA,eAAeF,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}