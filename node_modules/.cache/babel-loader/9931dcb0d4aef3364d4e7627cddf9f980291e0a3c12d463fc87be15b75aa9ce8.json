{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { useCallback, useRef, useEffect } from 'react';\nimport omit from 'lodash/omit';\nimport isNil from 'lodash/isNil';\nimport { shallowEqual } from \"../../internals/utils/index.js\";\nimport { formatNodeRefKey } from \"../utils/index.js\";\nimport useForceUpdate from \"./useForceUpdate.js\";\n/**\n * Custom hook that flattens a tree data structure into a map of nodes.\n *\n */\nfunction useFlattenTree(data, options) {\n  var value = options.value,\n    labelKey = options.labelKey,\n    valueKey = options.valueKey,\n    childrenKey = options.childrenKey,\n    _options$uncheckableI = options.uncheckableItemValues,\n    uncheckableItemValues = _options$uncheckableI === void 0 ? [] : _options$uncheckableI,\n    cascade = options.cascade,\n    multiple = options.multiple,\n    callback = options.callback;\n  var forceUpdate = useForceUpdate();\n  var flattenedNodes = useRef({});\n  var updateTreeNodeCheckState = useCallback(function (value) {\n    if (value === void 0) {\n      value = [];\n    }\n    // Reset values to false\n    Object.keys(flattenedNodes.current).forEach(function (refKey) {\n      var node = flattenedNodes.current[refKey];\n      if (cascade && !isNil(node.parent) && !isNil(node.parent.refKey)) {\n        node.check = flattenedNodes.current[node.parent.refKey].check;\n      } else {\n        node.check = false;\n      }\n      value.forEach(function (nodeVal) {\n        if (shallowEqual(flattenedNodes.current[refKey][valueKey], nodeVal) && !uncheckableItemValues.some(function (uncheckableValue) {\n          return shallowEqual(nodeVal, uncheckableValue);\n        })) {\n          flattenedNodes.current[refKey].check = true;\n        }\n      });\n    });\n  }, [cascade, uncheckableItemValues, valueKey]);\n  var flattenTreeData = useCallback(function (treeData, parent, layer) {\n    if (layer === void 0) {\n      layer = 1;\n    }\n    if (!Array.isArray(treeData) || treeData.length === 0) {\n      return [];\n    }\n    treeData.map(function (node) {\n      var _extends2;\n      var value = node[valueKey];\n      /**\n       * because the value of the node's type is string or number,\n       * so it can used as the key of the object directly\n       * to avoid number value is converted to string. 1 and '1' will be convert to '1'\n       * we used `String_` or `Number_` prefix\n       */\n      var refKey = formatNodeRefKey(value);\n      node.refKey = refKey;\n      flattenedNodes.current[refKey] = _extends((_extends2 = {\n        layer: layer\n      }, _extends2[labelKey] = node[labelKey], _extends2[valueKey] = node[valueKey], _extends2.uncheckable = uncheckableItemValues.some(function (value) {\n        return shallowEqual(node[valueKey], value);\n      }), _extends2), node);\n      if (parent) {\n        flattenedNodes.current[refKey].parent = omit(parent, 'parent', 'children');\n      }\n      flattenTreeData(node[childrenKey], node, layer + 1);\n    });\n    callback === null || callback === void 0 ? void 0 : callback(flattenedNodes.current);\n    forceUpdate();\n  }, [callback, forceUpdate, valueKey, labelKey, uncheckableItemValues, childrenKey]);\n  useEffect(function () {\n    // when data is changed, should clear the flattenedNodes, avoid duplicate keys\n    flattenedNodes.current = {};\n    flattenTreeData(data);\n  }, [data]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if (multiple) {\n      updateTreeNodeCheckState(value);\n      forceUpdate();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [value]);\n  return flattenedNodes.current;\n}\nexport default useFlattenTree;","map":{"version":3,"names":["_extends","useCallback","useRef","useEffect","omit","isNil","shallowEqual","formatNodeRefKey","useForceUpdate","useFlattenTree","data","options","value","labelKey","valueKey","childrenKey","_options$uncheckableI","uncheckableItemValues","cascade","multiple","callback","forceUpdate","flattenedNodes","updateTreeNodeCheckState","Object","keys","current","forEach","refKey","node","parent","check","nodeVal","some","uncheckableValue","flattenTreeData","treeData","layer","Array","isArray","length","map","_extends2","uncheckable"],"sources":["C:/Users/lenovo/OneDrive/Documents/local project/platfoorm45_technical_challenge/node_modules/rsuite/esm/Tree/hooks/useFlattenTree.js"],"sourcesContent":["'use client';\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { useCallback, useRef, useEffect } from 'react';\nimport omit from 'lodash/omit';\nimport isNil from 'lodash/isNil';\nimport { shallowEqual } from \"../../internals/utils/index.js\";\nimport { formatNodeRefKey } from \"../utils/index.js\";\nimport useForceUpdate from \"./useForceUpdate.js\";\n/**\n * Custom hook that flattens a tree data structure into a map of nodes.\n *\n */\nfunction useFlattenTree(data, options) {\n  var value = options.value,\n    labelKey = options.labelKey,\n    valueKey = options.valueKey,\n    childrenKey = options.childrenKey,\n    _options$uncheckableI = options.uncheckableItemValues,\n    uncheckableItemValues = _options$uncheckableI === void 0 ? [] : _options$uncheckableI,\n    cascade = options.cascade,\n    multiple = options.multiple,\n    callback = options.callback;\n  var forceUpdate = useForceUpdate();\n  var flattenedNodes = useRef({});\n  var updateTreeNodeCheckState = useCallback(function (value) {\n    if (value === void 0) {\n      value = [];\n    }\n    // Reset values to false\n    Object.keys(flattenedNodes.current).forEach(function (refKey) {\n      var node = flattenedNodes.current[refKey];\n      if (cascade && !isNil(node.parent) && !isNil(node.parent.refKey)) {\n        node.check = flattenedNodes.current[node.parent.refKey].check;\n      } else {\n        node.check = false;\n      }\n      value.forEach(function (nodeVal) {\n        if (shallowEqual(flattenedNodes.current[refKey][valueKey], nodeVal) && !uncheckableItemValues.some(function (uncheckableValue) {\n          return shallowEqual(nodeVal, uncheckableValue);\n        })) {\n          flattenedNodes.current[refKey].check = true;\n        }\n      });\n    });\n  }, [cascade, uncheckableItemValues, valueKey]);\n  var flattenTreeData = useCallback(function (treeData, parent, layer) {\n    if (layer === void 0) {\n      layer = 1;\n    }\n    if (!Array.isArray(treeData) || treeData.length === 0) {\n      return [];\n    }\n    treeData.map(function (node) {\n      var _extends2;\n      var value = node[valueKey];\n      /**\n       * because the value of the node's type is string or number,\n       * so it can used as the key of the object directly\n       * to avoid number value is converted to string. 1 and '1' will be convert to '1'\n       * we used `String_` or `Number_` prefix\n       */\n      var refKey = formatNodeRefKey(value);\n      node.refKey = refKey;\n      flattenedNodes.current[refKey] = _extends((_extends2 = {\n        layer: layer\n      }, _extends2[labelKey] = node[labelKey], _extends2[valueKey] = node[valueKey], _extends2.uncheckable = uncheckableItemValues.some(function (value) {\n        return shallowEqual(node[valueKey], value);\n      }), _extends2), node);\n      if (parent) {\n        flattenedNodes.current[refKey].parent = omit(parent, 'parent', 'children');\n      }\n      flattenTreeData(node[childrenKey], node, layer + 1);\n    });\n    callback === null || callback === void 0 ? void 0 : callback(flattenedNodes.current);\n    forceUpdate();\n  }, [callback, forceUpdate, valueKey, labelKey, uncheckableItemValues, childrenKey]);\n  useEffect(function () {\n    // when data is changed, should clear the flattenedNodes, avoid duplicate keys\n    flattenedNodes.current = {};\n    flattenTreeData(data);\n  }, [data]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if (multiple) {\n      updateTreeNodeCheckState(value);\n      forceUpdate();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [value]);\n  return flattenedNodes.current;\n}\nexport default useFlattenTree;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}