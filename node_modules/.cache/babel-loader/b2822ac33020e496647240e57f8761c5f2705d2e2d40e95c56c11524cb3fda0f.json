{"ast":null,"code":"'use client';\n\nexport function useKeyboardInputEvent(_ref) {\n  var onSegmentChange = _ref.onSegmentChange,\n    onSegmentValueChange = _ref.onSegmentValueChange,\n    onSegmentValueChangeWithNumericKeys = _ref.onSegmentValueChangeWithNumericKeys,\n    onSegmentValueRemove = _ref.onSegmentValueRemove,\n    onKeyDown = _ref.onKeyDown;\n  return function (event) {\n    var _key$match, _key$match2;\n    var key = event.key;\n    switch (key) {\n      case 'ArrowRight':\n      case 'ArrowLeft':\n        onSegmentChange === null || onSegmentChange === void 0 ? void 0 : onSegmentChange(event);\n        event.preventDefault();\n        break;\n      case 'ArrowUp':\n      case 'ArrowDown':\n        onSegmentValueChange === null || onSegmentValueChange === void 0 ? void 0 : onSegmentValueChange(event);\n        event.preventDefault();\n        break;\n      case 'Backspace':\n        onSegmentValueRemove === null || onSegmentValueRemove === void 0 ? void 0 : onSegmentValueRemove(event);\n        event.preventDefault();\n        break;\n      case (_key$match = key.match(/\\d/)) === null || _key$match === void 0 ? void 0 : _key$match.input:\n        // Allow numeric keys to be entered\n        onSegmentValueChangeWithNumericKeys === null || onSegmentValueChangeWithNumericKeys === void 0 ? void 0 : onSegmentValueChangeWithNumericKeys(event);\n        event.preventDefault();\n      case (_key$match2 = key.match(/[a-z]/)) === null || _key$match2 === void 0 ? void 0 : _key$match2[0]:\n        // Determine whether the Ctrl or Command key is pressed, does not affect user copy and paste\n        if (event.ctrlKey || event.metaKey) {\n          break;\n        }\n\n        // Prevent letters from being entered\n        event.preventDefault();\n        break;\n    }\n    onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(event);\n  };\n}\nexport default useKeyboardInputEvent;","map":{"version":3,"names":["useKeyboardInputEvent","_ref","onSegmentChange","onSegmentValueChange","onSegmentValueChangeWithNumericKeys","onSegmentValueRemove","onKeyDown","event","_key$match","_key$match2","key","preventDefault","match","input","ctrlKey","metaKey"],"sources":["C:/Users/lenovo/OneDrive/Documents/local project/platfoorm45_technical_challenge/node_modules/rsuite/esm/DateInput/hooks/useKeyboardInputEvent.js"],"sourcesContent":["'use client';\nexport function useKeyboardInputEvent(_ref) {\n  var onSegmentChange = _ref.onSegmentChange,\n    onSegmentValueChange = _ref.onSegmentValueChange,\n    onSegmentValueChangeWithNumericKeys = _ref.onSegmentValueChangeWithNumericKeys,\n    onSegmentValueRemove = _ref.onSegmentValueRemove,\n    onKeyDown = _ref.onKeyDown;\n  return function (event) {\n    var _key$match, _key$match2;\n    var key = event.key;\n    switch (key) {\n      case 'ArrowRight':\n      case 'ArrowLeft':\n        onSegmentChange === null || onSegmentChange === void 0 ? void 0 : onSegmentChange(event);\n        event.preventDefault();\n        break;\n      case 'ArrowUp':\n      case 'ArrowDown':\n        onSegmentValueChange === null || onSegmentValueChange === void 0 ? void 0 : onSegmentValueChange(event);\n        event.preventDefault();\n        break;\n      case 'Backspace':\n        onSegmentValueRemove === null || onSegmentValueRemove === void 0 ? void 0 : onSegmentValueRemove(event);\n        event.preventDefault();\n        break;\n      case (_key$match = key.match(/\\d/)) === null || _key$match === void 0 ? void 0 : _key$match.input:\n        // Allow numeric keys to be entered\n        onSegmentValueChangeWithNumericKeys === null || onSegmentValueChangeWithNumericKeys === void 0 ? void 0 : onSegmentValueChangeWithNumericKeys(event);\n        event.preventDefault();\n      case (_key$match2 = key.match(/[a-z]/)) === null || _key$match2 === void 0 ? void 0 : _key$match2[0]:\n        // Determine whether the Ctrl or Command key is pressed, does not affect user copy and paste\n        if (event.ctrlKey || event.metaKey) {\n          break;\n        }\n\n        // Prevent letters from being entered\n        event.preventDefault();\n        break;\n    }\n    onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(event);\n  };\n}\nexport default useKeyboardInputEvent;"],"mappings":"AAAA,YAAY;;AACZ,OAAO,SAASA,qBAAqBA,CAACC,IAAI,EAAE;EAC1C,IAAIC,eAAe,GAAGD,IAAI,CAACC,eAAe;IACxCC,oBAAoB,GAAGF,IAAI,CAACE,oBAAoB;IAChDC,mCAAmC,GAAGH,IAAI,CAACG,mCAAmC;IAC9EC,oBAAoB,GAAGJ,IAAI,CAACI,oBAAoB;IAChDC,SAAS,GAAGL,IAAI,CAACK,SAAS;EAC5B,OAAO,UAAUC,KAAK,EAAE;IACtB,IAAIC,UAAU,EAAEC,WAAW;IAC3B,IAAIC,GAAG,GAAGH,KAAK,CAACG,GAAG;IACnB,QAAQA,GAAG;MACT,KAAK,YAAY;MACjB,KAAK,WAAW;QACdR,eAAe,KAAK,IAAI,IAAIA,eAAe,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,eAAe,CAACK,KAAK,CAAC;QACxFA,KAAK,CAACI,cAAc,CAAC,CAAC;QACtB;MACF,KAAK,SAAS;MACd,KAAK,WAAW;QACdR,oBAAoB,KAAK,IAAI,IAAIA,oBAAoB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,oBAAoB,CAACI,KAAK,CAAC;QACvGA,KAAK,CAACI,cAAc,CAAC,CAAC;QACtB;MACF,KAAK,WAAW;QACdN,oBAAoB,KAAK,IAAI,IAAIA,oBAAoB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,oBAAoB,CAACE,KAAK,CAAC;QACvGA,KAAK,CAACI,cAAc,CAAC,CAAC;QACtB;MACF,KAAK,CAACH,UAAU,GAAGE,GAAG,CAACE,KAAK,CAAC,IAAI,CAAC,MAAM,IAAI,IAAIJ,UAAU,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACK,KAAK;QAC/F;QACAT,mCAAmC,KAAK,IAAI,IAAIA,mCAAmC,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,mCAAmC,CAACG,KAAK,CAAC;QACpJA,KAAK,CAACI,cAAc,CAAC,CAAC;MACxB,KAAK,CAACF,WAAW,GAAGC,GAAG,CAACE,KAAK,CAAC,OAAO,CAAC,MAAM,IAAI,IAAIH,WAAW,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,WAAW,CAAC,CAAC,CAAC;QAClG;QACA,IAAIF,KAAK,CAACO,OAAO,IAAIP,KAAK,CAACQ,OAAO,EAAE;UAClC;QACF;;QAEA;QACAR,KAAK,CAACI,cAAc,CAAC,CAAC;QACtB;IACJ;IACAL,SAAS,KAAK,IAAI,IAAIA,SAAS,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,SAAS,CAACC,KAAK,CAAC;EACxE,CAAC;AACH;AACA,eAAeP,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}