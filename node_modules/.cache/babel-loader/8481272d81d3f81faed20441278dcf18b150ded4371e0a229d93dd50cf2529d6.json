{"ast":null,"code":"'use client';\n\nimport _groupBy from \"lodash/groupBy\";\nimport { WalkTreeStrategy, flattenTree } from \"../../Tree/utils/index.js\";\nimport { RSUITE_PICKER_GROUP_KEY } from \"../symbols.js\";\nexport var KEY_GROUP_TITLE = 'groupTitle';\nexport function getDataGroupBy(data, key, sort) {\n  var groupMap = _groupBy(data, key);\n  var isSort = typeof sort === 'function';\n  var groups = Object.entries(groupMap).map(function (_ref) {\n    var _ref2;\n    var groupTitle = _ref[0],\n      children = _ref[1];\n    return _ref2 = {\n      children: isSort ? children.sort(sort(false)) : children\n    }, _ref2[KEY_GROUP_TITLE] = groupTitle, _ref2[RSUITE_PICKER_GROUP_KEY] = true, _ref2;\n  });\n  if (isSort) {\n    groups.sort(sort(true));\n  }\n\n  // Use DFS traverse\n  // Because I want the result to be [group, child, child, group, child, child]\n  // rather than [group, group, child, child, child, child]\n  return flattenTree(groups, function (group) {\n    return group.children;\n  }, WalkTreeStrategy.DFS);\n}\nexport default getDataGroupBy;","map":{"version":3,"names":["_groupBy","WalkTreeStrategy","flattenTree","RSUITE_PICKER_GROUP_KEY","KEY_GROUP_TITLE","getDataGroupBy","data","key","sort","groupMap","isSort","groups","Object","entries","map","_ref","_ref2","groupTitle","children","group","DFS"],"sources":["C:/Users/lenovo/OneDrive/Documents/local project/platfoorm45_technical_challenge/node_modules/rsuite/esm/internals/utils/getDataGroupBy.js"],"sourcesContent":["'use client';\nimport _groupBy from \"lodash/groupBy\";\nimport { WalkTreeStrategy, flattenTree } from \"../../Tree/utils/index.js\";\nimport { RSUITE_PICKER_GROUP_KEY } from \"../symbols.js\";\nexport var KEY_GROUP_TITLE = 'groupTitle';\nexport function getDataGroupBy(data, key, sort) {\n  var groupMap = _groupBy(data, key);\n  var isSort = typeof sort === 'function';\n  var groups = Object.entries(groupMap).map(function (_ref) {\n    var _ref2;\n    var groupTitle = _ref[0],\n      children = _ref[1];\n    return _ref2 = {\n      children: isSort ? children.sort(sort(false)) : children\n    }, _ref2[KEY_GROUP_TITLE] = groupTitle, _ref2[RSUITE_PICKER_GROUP_KEY] = true, _ref2;\n  });\n  if (isSort) {\n    groups.sort(sort(true));\n  }\n\n  // Use DFS traverse\n  // Because I want the result to be [group, child, child, group, child, child]\n  // rather than [group, group, child, child, child, child]\n  return flattenTree(groups, function (group) {\n    return group.children;\n  }, WalkTreeStrategy.DFS);\n}\nexport default getDataGroupBy;"],"mappings":"AAAA,YAAY;;AACZ,OAAOA,QAAQ,MAAM,gBAAgB;AACrC,SAASC,gBAAgB,EAAEC,WAAW,QAAQ,2BAA2B;AACzE,SAASC,uBAAuB,QAAQ,eAAe;AACvD,OAAO,IAAIC,eAAe,GAAG,YAAY;AACzC,OAAO,SAASC,cAAcA,CAACC,IAAI,EAAEC,GAAG,EAAEC,IAAI,EAAE;EAC9C,IAAIC,QAAQ,GAAGT,QAAQ,CAACM,IAAI,EAAEC,GAAG,CAAC;EAClC,IAAIG,MAAM,GAAG,OAAOF,IAAI,KAAK,UAAU;EACvC,IAAIG,MAAM,GAAGC,MAAM,CAACC,OAAO,CAACJ,QAAQ,CAAC,CAACK,GAAG,CAAC,UAAUC,IAAI,EAAE;IACxD,IAAIC,KAAK;IACT,IAAIC,UAAU,GAAGF,IAAI,CAAC,CAAC,CAAC;MACtBG,QAAQ,GAAGH,IAAI,CAAC,CAAC,CAAC;IACpB,OAAOC,KAAK,GAAG;MACbE,QAAQ,EAAER,MAAM,GAAGQ,QAAQ,CAACV,IAAI,CAACA,IAAI,CAAC,KAAK,CAAC,CAAC,GAAGU;IAClD,CAAC,EAAEF,KAAK,CAACZ,eAAe,CAAC,GAAGa,UAAU,EAAED,KAAK,CAACb,uBAAuB,CAAC,GAAG,IAAI,EAAEa,KAAK;EACtF,CAAC,CAAC;EACF,IAAIN,MAAM,EAAE;IACVC,MAAM,CAACH,IAAI,CAACA,IAAI,CAAC,IAAI,CAAC,CAAC;EACzB;;EAEA;EACA;EACA;EACA,OAAON,WAAW,CAACS,MAAM,EAAE,UAAUQ,KAAK,EAAE;IAC1C,OAAOA,KAAK,CAACD,QAAQ;EACvB,CAAC,EAAEjB,gBAAgB,CAACmB,GAAG,CAAC;AAC1B;AACA,eAAef,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}